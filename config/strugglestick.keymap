/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    macros {
        rgblayer: rgb_layer {
        compatible = "zmk,behavior-macro-two-param";
        #binding-cells = <2>;
        label = "MOMENTARY_LAYER_WITH_RGB_COLOR";
        bindings
            = <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER &macro_param_1to1>
            , <&macro_press>
            , <&mo MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_release>
            , <&macro_param_1to1 &mo 0>
            , <&macro_tap>
            , <&rgb_ug RGB_TOG>
            ;
        };
        shift: with_lshift {
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        bindings
            = <&macro_press>
            , <&kp LSHFT>
            , <&macro_tap>
            , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
            , <&macro_release>
            , <&kp LSHFT>
            ;
        };
    };

    behaviors {
        volknob: volume_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        label = "ENCODER_VOLUME_KNOB";
        #sensor-binding-cells = <0>;
        bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };
        rgbknob: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate-var";
        label = "ENCODER_RGB";
        #sensor-binding-cells = <2>;
        bindings = <&rgb_ug>, <&rgb_ug>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q      &kp W    &kp E      &kp R      &kp T
&kp LCTRL  &kp A      &kp S    &kp D      &kp F      &kp G
&kp RSHFT  &kp Z      &kp X    &kp C      &kp V      &kp B      &mkp LCLK
&kp LALT   &kp LGUI            &mo 1      &kp DEL    &kp SPACE  &mo 4
&kp MINUS  &kp P      &kp O    &kp I      &kp U      &kp Y
&kp SQT    &kp SLCK   &kp L    &kp K      &kp J      &kp H
&kp RSHFT  &kp SLASH  &kp DOT  &kp COMMA  &kp M      &kp N      &mkp RCLK
&kp PSCRN  &mo 2               &kp BSPC   &kp ENTER  &mo 3
            >;

            sensor-bindings = <&rgbknob RGB_HUI RGB_HUD>, <&rgbknob RGB_BRI RGB_BRD>;
        };

        num_layer {
            bindings = <
&kp TAB    &kp Q      &kp W    &kp E      &kp R      &kp T
&kp LCTRL  &kp A      &kp S    &kp D      &kp F      &kp G
&kp RSHFT  &kp Z      &kp X    &kp C      &kp V      &kp B      &mkp LCLK
&kp LALT   &kp LGUI            &mo 1      &kp DEL    &kp SPACE  &mo 4
&kp MINUS  &kp P      &kp O    &kp I      &kp U      &kp Y
&kp SQT    &kp SLCK   &kp L    &kp K      &kp J      &kp H
&kp RSHFT  &kp SLASH  &kp DOT  &kp COMMA  &kp M      &kp N      &mkp RCLK
&kp PSCRN  &mo 2               &kp BSPC   &kp ENTER  &mo 3
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp Q      &kp W    &kp E      &kp R      &kp T
&kp LCTRL  &kp A      &kp S    &kp D      &kp F      &kp G
&kp RSHFT  &kp Z      &kp X    &kp C      &kp V      &kp B      &mkp LCLK
&kp LALT   &kp LGUI            &mo 1      &kp DEL    &kp SPACE  &mo 4
&kp MINUS  &kp P      &kp O    &kp I      &kp U      &kp Y
&kp SQT    &kp SLCK   &kp L    &kp K      &kp J      &kp H
&kp RSHFT  &kp SLASH  &kp DOT  &kp COMMA  &kp M      &kp N      &mkp RCLK
&kp PSCRN  &mo 2               &kp BSPC   &kp ENTER  &mo 3
            >;
        };
    };
};
