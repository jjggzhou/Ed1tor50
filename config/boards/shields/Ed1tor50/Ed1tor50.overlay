/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include "Ed1tor50-layouts.dtsi"
#include <dt-bindings/led/led.h>

#include <zmk_driver_animation/animation.dtsi>
#include <zmk_driver_animation/animation_layer_status.dtsi>
#include <dt-bindings/zmk_driver_animation/animation_control.h>
#include <dt-bindings/zmk_driver_animation/animation_trigger.h>
#include <behaviors/animation_trigger.dtsi>

&physical_layout0 {
    transform = <&matrix_transform>;
};


/ {
    chosen {
        zmk,kscan = &kscan0;
		zmk,underglow = &led_strip;
		zmk,physical-layout = &physical_layout0;

        // Set root animation device. Suggested device is zmk,animation-control.
        zmk,animation = &root_animation;
        // Set zmk,animation-control device to be accessed from behavior.
        zmk,animation-control = &root_animation;
    };


    kscan0: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        wakeup-source;	
        diode-direction = "col2row";

         col-gpios
                = <&gpio0 1 GPIO_ACTIVE_HIGH>
                , <&gpio1 6 GPIO_ACTIVE_HIGH>
                , <&gpio1 4 GPIO_ACTIVE_HIGH>
                , <&gpio1 2 GPIO_ACTIVE_HIGH>
                , <&gpio1 0 GPIO_ACTIVE_HIGH>
                , <&gpio0 22 GPIO_ACTIVE_HIGH>
                , <&gpio0 17 GPIO_ACTIVE_HIGH>
                ;

        row-gpios
                = <&gpio0 29 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio1 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 24 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                ;
    };

	    matrix_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        rows = <8>;
        columns = <7>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                        RC(4,5) RC(4,4) RC(4,3) RC(4,2) RC(4,1) RC(4,0)             
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                        RC(5,5) RC(5,4) RC(5,3) RC(5,2) RC(5,1) RC(5,0)             
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6)        RC(6,6) RC(6,5) RC(6,4) RC(6,3) RC(6,2) RC(6,1) RC(6,0)
            RC(3,1) RC(3,2)         RC(3,3) RC(3,4) RC(3,5)         RC(3,6)        RC(7,5) RC(7,4) RC(7,3)         RC(7,2) RC(7,1)       
        >;
    };

    kscan1: kscan_joystick_button {
		compatible = "zmk,kscan-gpio-direct";
		wakeup-source;
		toggle-mode;
		input-gpios = <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
	};

	left_encoder: encoder_left {
		compatible = "alps,ec11";
		a-gpios = <&gpio0 28 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
		b-gpios = <&gpio0 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
		steps = <30>;
		status = "okay";
	};

	right_encoder: encoder_right {
		compatible = "alps,ec11";
		a-gpios = <&gpio0 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
		b-gpios = <&gpio1 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
		steps = <30>;
		status = "okay";
	};

	sensors {
		compatible = "zmk,keymap-sensors";
		sensors = <&left_encoder &right_encoder>;
		triggers-per-rotation = <15>;
	};
	
	joystick_listener {
		compatible = "zmk,input-listener";
		device = <&anin0>;
	};

    led_power:led_power {
    compatible = "zmk,ext-power-transient";
    control-gpios = <&gpio1 9 (GPIO_ACTIVE_LOW)>;
    };

     // Animation node which controls animation device.
    // LED device and pixel mapping is defined in it.
    animation: animation {
        compatible = "zmk,animation";
        drivers = <&led_strip>;
        pixels = <&pixel 0 0>,
            <&pixel 1 0>;
        chain-lengths = <2>;
    };


    // Root animation played by &animation node. It keeps running during ZMK is active state (and idle state depends on setting).
    // zmk,animation-control plays child animations depending on power status, event and user input.
    root_animation:animation_0 {
        compatible = "zmk,animation-control";
        label = "ANIMATION_CTRL_0";
        powered-animations = <&endpoint_status &rainbow_animation>;
        battery-animations = <&empty_animation>;
        behavior-animations = <&battery_status &endpoint_status &animation_layer_status>;
        init-animation = <&init_animation>;
        activation-animation = <&battery_status>;
        activation-animation-duration-ms = <1000>;
        ext-power = <&led_power>;
    };

    //
    // Animation definitions
    //

    // animation played at start up.
    // zmk,animation-compose can compose multiple animations.
    init_animation:init_animation {
        compatible = "zmk,animation-compose";
        // animations are played sequentially by default. Parallel mode is also supported.
        // Below setting shows battery status animation for 1sec, black for 0.2sec and shows endpoint status for 1sec.
        animations = <&battery_status &black_animation &endpoint_status>;
        durations-ms = <1000 200 1000>;
    };

    black_animation:black_animation {
        compatible = "zmk,animation-solid";
        pixels = <0 1>;
        colors = <HSL(0, 0, 0)>;
    };

    // zmk,animation-empty is special device. animation-control turns OFF LED module during playing it by setting ext-power OFF.
    empty_animation:empty_animation {
        compatible = "zmk,animation-empty";
        status = "okay";
    };
    rainbow_animation:rainbow_animation {
        compatible = "zmk,animation-solid";
        status = "okay";
        pixels = <0 1>;
        colors = <HSL(0, 100, 50) HSL(60, 100, 50) HSL(120, 100, 50) HSL(180, 100, 50) HSL(240, 100, 50) HSL(300, 100, 50)>;
    };
    // endpoint status animation
    // The driver also implements endpoint change event handling and animation automatically played when endpoint changed.
    endpoint_status:endpoint_status {
        compatible = "zmk,animation-endpoint";
        status = "okay";
        pixels = <0 1>;
        color-open = <HSL(60, 100, 50)>;
        color-connected = <HSL(240, 100, 50)>;
        color-disconnected = <HSL(0, 100, 50)>;
        color-usb = <HSL(120, 100, 25)>;
    };
    // Battery status animation
    // The driver also implements battery status change event handling and show warning animation when battery percentage became low.
    battery_status:battery_status {
        compatible = "zmk,animation-battery-status";
        status = "okay";
        pixels = <0 1>;
        color-high = <HSL(120, 100, 50)>; // green
        color-middle = <HSL(60, 100, 50)>; // yellow
        color-low = <HSL(0, 100, 50)>; // red
    };
};



// zmk,animation-layer-status is provided by #include <zmk_driver_animation/animation_layer_status.dtsi> (Why...? I completely forgot reason why only this node is pre-defined...)
// Below code overwrites some fields to work nicely with https://github.com/cormoran/zmk-feature-default-layer
&animation_layer_status {
    pixels = <0 1>;
    default-color = <HSL(240, 100, 50)>;
    // default
    // windows blue
    // mac red
    // ios white
    // linux orange
    colors = <
        HSL(240, 100, 50)
        HSL(193, 100, 47)
        HSL(0, 100, 40)
        HSL(0, 100, 100)
        HSL(29, 88, 51)
    >;

};


&adc {
    status = "okay";
};


&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 9)>; // WS2812_VEXT_DATA
        };
    };
    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 9)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";

    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        /* SPI */
        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */
        chain-length = <2>; /* number of LEDs */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN
                         LED_COLOR_ID_RED
                         LED_COLOR_ID_BLUE>;
    };
};

/ {
	anin0: analog_input_0 {
		compatible = "zmk,analog-input";
		sampling-hz = <100>;

  x-ch {
   io-channels = <&adc 7>;
   mv-mid = <32767>;
   mv-min-max = <800>;
   mv-deadzone = <50>;
   scale-multiplier = <1>;
   scale-divisor = <6>;
   evt-type = <INPUT_EV_REL>;
   input-code = <INPUT_REL_X>;
   report-on-change-only;
  };
  y-ch {
   io-channels = <&adc 6>;
   mv-mid = <32767>;
   mv-min-max = <800>;
   mv-deadzone = <50>;
   scale-multiplier = <1>;
   scale-divisor = <6>;
   evt-type = <INPUT_EV_REL>;
   input-code = <INPUT_REL_Y>;
   report-on-change-only;
  };
	};
};

